HowよりもWhyの方が大事！
　->なぜ必要かを学ぶ。パラダイム・シフト対策

１．JavaScriptの歴史
・ECMAScriptはどの実行環境でも共通な動作のみが定義
->コンパイルの必要があり
・最初は人気がなかった。
->グーグルマップの登場
・jQueryの誕生
->ブラウザ間の差異、簡単
・サーバーサイドJavaScriptの動き
・モジュールAPI
->ただのファイル、名前空間
・JavaScriptの問題点
JavaScriptは名前空間が一つしかない。バグを生む原因。依存関係
名前空間->モジュール(サーバーサイドのみ)
依存空間->パッケージ管理(npm)

ブラウザでモジュールを使うためには？
Node.jsの誕生
パッケージ管理システム
・リポジトリの購読
->ローカル環境にインストールしたパッケージのアップデート

AMD時代
Bower誕生
->ブラウザ面でもまだ問題が

考え方を変える。
CommonJS形式で書かれたものを事前にブラウザ向けに変換する。
書いたコードと動くコードが違う。

bundle
・開発時はCommonJS形式で開発
・モジュールの依存関係を解決して１ファイルに変換（bundle）
・変換したコードをいつもどおりscriptタグで読み込む。

Browserifyの誕生
require構文が使える様になった。Node.jsのパッケージがブラウザ向けに移植可能
ブラウザでもnpmが主流に

webpsckの誕生
jabascript,html,css等もバンドルすることができる。現在はこちらが主流。
ブラウザが読み込める形に変換される。

ES Moduleができた。JavaScriptで公式で採用

webpackがES Modules対応

コンパイル
・開発時ではブラウザでは動かないが開発に便利な機能を使ってコードが書ける
・ブラウザで動くように変換
・scriptタグで読み込む

コンパイルを通して様々なパッケージが流行る

＜まとめ＞
ブラウザでモジュールを使うために模索した結果、
コードを事前に変換することが主流になった。様々な恩恵がある。

２．モジュール(一つのファイル)

３．npm　モジュールの管理方法

４．コンパイル言語

５．ビルド

６．タスクランナー npm script

７．リアルDOMから仮想DOMへ